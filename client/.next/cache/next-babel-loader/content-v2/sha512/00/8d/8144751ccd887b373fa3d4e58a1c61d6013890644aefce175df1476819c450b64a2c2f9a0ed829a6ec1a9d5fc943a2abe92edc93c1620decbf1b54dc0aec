{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Internship\\\\client\\\\context\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useReducer, createContext, useEffect } from \"react\"; // initial state\n\nconst intialState = {\n  user: null\n}; // create context\n\nconst Context = /*#__PURE__*/createContext(); // root reducer\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.payload\n      });\n\n    case \"LOGOUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: null\n      });\n\n    default:\n      return state;\n  }\n}; // context provider this will have the entire app as the children\n\n\nconst Provider = ({\n  children\n}) => {\n  // with reducer we use one function name to update the state called dispach\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(rootReducer, intialState); // useEffect(() => {\n  //   dispatch({\n  //     type: \"LOGIN\",\n  //     payload: JSON.parse(window.localStorage.getItem(\"user\")),\n  //   });\n  // }, []);\n\n  return (\n    /*#__PURE__*/\n    // the value always has to be an object type\n    _jsxDEV(Context.Provider, {\n      value: {\n        state,\n        dispatch\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  );\n};\n\nexport { Context, Provider };","map":{"version":3,"sources":["D:/Internship/client/context/index.js"],"names":["useReducer","createContext","useEffect","intialState","user","Context","rootReducer","state","action","type","payload","Provider","children","dispatch"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,SAApC,QAAqD,OAArD,C,CAEA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE;AADY,CAApB,C,CAIA;;AACA,MAAMC,OAAO,gBAAGJ,aAAa,EAA7B,C,CAEA;;AACA,MAAMK,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,6CAAYF,KAAZ;AAAmBH,QAAAA,IAAI,EAAEI,MAAM,CAACE;AAAhC;;AACF,SAAK,QAAL;AACE,6CAAYH,KAAZ;AAAmBH,QAAAA,IAAI,EAAE;AAAzB;;AACF;AACE,aAAOG,KAAP;AANJ;AAQD,CATD,C,CAWA;;;AACA,MAAMI,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjC;AACA,QAAM;AAAA,OAACL,KAAD;AAAA,OAAQM;AAAR,MAAoBb,UAAU,CAACM,WAAD,EAAcH,WAAd,CAApC,CAFiC,CAIjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACE;AACA,YAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAF;AAASM,QAAAA;AAAT,OAAzB;AAAA,gBAA+CD;AAA/C;AAAA;AAAA;AAAA;AAAA;AAFF;AAID,CAfD;;AAiBA,SAASP,OAAT,EAAkBM,QAAlB","sourcesContent":["import { useReducer, createContext, useEffect } from \"react\";\n\n// initial state\nconst intialState = {\n  user: null,\n};\n\n// create context\nconst Context = createContext();\n\n// root reducer\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return { ...state, user: action.payload };\n    case \"LOGOUT\":\n      return { ...state, user: null };\n    default:\n      return state;\n  }\n};\n\n// context provider this will have the entire app as the children\nconst Provider = ({ children }) => {\n  // with reducer we use one function name to update the state called dispach\n  const [state, dispatch] = useReducer(rootReducer, intialState);\n\n  // useEffect(() => {\n  //   dispatch({\n  //     type: \"LOGIN\",\n  //     payload: JSON.parse(window.localStorage.getItem(\"user\")),\n  //   });\n  // }, []);\n\n  return (\n    // the value always has to be an object type\n    <Context.Provider value={{ state, dispatch }}>{children}</Context.Provider>\n  );\n};\n\nexport { Context, Provider };\n"]},"metadata":{},"sourceType":"module"}